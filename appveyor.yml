environment:
  global:
    RUST_VERSION: stable
    CRATE_NAME: notify

  matrix:
    # Stable: MINGW, MSVC, 64/32
    #- TARGET: i686-pc-windows-gnu // uncomment for first beta
    #- TARGET: x86_64-pc-windows-gnu
    #- TARGET: i686-pc-windows-msvc
    #- TARGET: x86_64-pc-windows-msvc

    # Beta: MSVC 64/32
    #- TARGET: i686-pc-windows-msvc // uncomment for first alpha
    #  RUST_VERSION: beta
    - TARGET: x86_64-pc-windows-msvc
      RUST_VERSION: beta

    # Nightly: MSVC 64
    - TARGET: x86_64-pc-windows-msvc
      RUST_VERSION: nightly

install:
  - ps: >-
      If ($Env:TARGET -eq 'x86_64-pc-windows-gnu') {
        $Env:PATH += ';C:\msys64\mingw64\bin'
      } ElseIf ($Env:TARGET -eq 'i686-pc-windows-gnu') {
        $Env:PATH += ';C:\msys64\mingw32\bin'
      }
  - curl -sSf -o rustup-init.exe https://win.rustup.rs/
  - rustup-init.exe -y --default-host %TARGET% --default-toolchain %RUST_VERSION%
  - set PATH=%PATH%;C:\Users\appveyor\.cargo\bin
  - rustc -Vv
  - cargo -V

test_script:
  # we don't run the "test phase" when doing deploys
  - if [%APPVEYOR_REPO_TAG%]==[false] (
      cargo build --target %TARGET% &&
      cargo build --target %TARGET% --release &&
      cargo test --target %TARGET% &&
      cargo test --target %TARGET% --release &&
      cargo test --target %TARGET% -p notify-backend &&
      cargo test --target %TARGET% -p notify-backend --release
    )

# cargo test --target %TARGET% -p notify-backend-winapi &&
# cargo test --target %TARGET% -p notify-backend-winapi --release
# cargo test --target %TARGET% -p notify-backend-poll-tree &&
# cargo test --target %TARGET% -p notify-backend-poll-tree --release

cache:
  - C:\Users\appveyor\.cargo\registry
  - target

branches:
  only:
    # Release tags
    # - /^v\d+\.\d+\.\d+.*$/
    # - master
    - next

# notifications:
#   - provider: Email
#     on_build_success: false

# Building is done in the test phase, so we disable Appveyor's build phase.
build: false
